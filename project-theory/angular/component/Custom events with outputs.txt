*) Angular components can define custom events by assigning a property to a new EventEmitter and adding the @Output decorator:

@Component({...})
export class ExpandablePanel {
  @Output() panelClosed = new EventEmitter<void>();
}
check
<expandable-panel (panelClosed)="savePanelState()" />
check
You can emit an event by calling the emit method on the EventEmitter:

this.panelClosed.emit();

*) Customizing output names
The @Output decorator accepts a parameter that lets you specify a different name for the event in a template:

@Component({...})
export class CustomSlider {
  @Output('valueChanged') changed = new EventEmitter<number>();
}
check
<custom-slider (valueChanged)="saveVolume()" />

*) Specify outputs in the @Component decorator
In addition to the @Output decorator, you can also specify a component's outputs with the outputs property in the @Component decorator. This can be useful when a component inherits a property from a base class:

// `CustomSlider` inherits the `valueChanged` property from `BaseSlider`.
@Component({
  ...,
  outputs: ['valueChanged'],
})
export class CustomSlider extends BaseSlider {}